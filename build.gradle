apply plugin: 'groovy'

defaultTasks 'cucumber_tcl'

/*** Configuration **********************************************************************/

// default values for gradle options: -D name : <default_value>
ext.default_config = [
    tcl               : 'tclsh',
    suite             : "./src/test/tcl/step_definitions",
    features          : "./features/cucumber_tcl",
    extra_options     : '',
    pause             : false, // keep tcl window open (windows) / log into a file on linux
    html              : false, // output into HTML
]

// set the defaults if no option given
ext.default_config.each { key, value ->
    def supplied_value = System.getProperty(key)
    if (!supplied_value) {
        ext."$key" = value
    } else {
        ext."$key" = supplied_value
    }
}

ext.timestamp = "${->new Date().format('yyyyMMddHHmmssSSS')}"

/*** Tasks ******************************************************************************/

task cucumber_tcl() {
    description 'run the tcl test suite in the background and start cucumber'

    doLast {
        // not quite right, as the features may contain a larger set of steps than each suite in itself
        get_suite_scripts(suite).each { suite_script ->
            // cucumber command line
            def cucumber_cli = [
                'cucumber',
                extra_options,
                file(features).absolutePath,
                output_options(suite_script)
            ]

            def pause_cli = (windows() && pause?.toBoolean()) ? 'cmd /K' : ''
            def prefix = windows() ? ['start', pause_cli] : []
            def tclsh_cli = prefix + [tcl, suite_script]

            // start tcl
            println tclsh_cli
            execute( tclsh_cli.join(' '), [io:windows()/*wait for io on windows*/, wait:false, log_prefix:'tcl'] )

            // start cucumber
            // sleep 1000 // wait for the interpreter to start (not very efficient)
            println cucumber_cli
            execute( cucumber_cli.join(' '), [io:true, wait:true] )
        }
    }
}

// run always
cucumber_tcl.outputs.upToDateWhen { false }


/*** Utility ****************************************************************************/

def get_suite_scripts(path) {
    fileTree(path)
        .include('**/suite.tcl')
        .collect { file(it).absolutePath }
}

def execute(what,Map map = [:])  {
    def params = [wait:true, io:true, log_prefix:'cucumber_run'] //defaults
    params << map

    ProcessBuilder builder = new ProcessBuilder(*(start_prefix()+what).split())

    // start here
    builder.directory( file('.') )

    if (params.io) {
        builder.inheritIO()
    } else {
        builder.redirectErrorStream(true)
        def log_filename = "${params.log_prefix}_${timestamp}.log"
        println "Redirecting output into: $log_filename"
        builder.redirectOutput(file(log_filename))
    }

    Process process = builder.start()
    if (params.wait) {
        process.waitForProcessOutput( System.out, System.err )
        def exit_value = process.exitValue()
        if (exit_value != 0) {
            throw new RuntimeException("Failed with exit code: $exit_value <<$what>>")
        }
    }
}

// -D html=true --> html output
def output_options(suite_script) {
    def html = System.properties['html']?.toBoolean()

    if (!html)
        return '--format pretty'

    def suite_name = file(file(suite_script).parent).name
    def html_report_filename = file("cucumber_${timestamp}.html").absolutePath
    println "Writing ouput into: $html_report_filename"
    return "--format pretty --format html --expand --out $html_report_filename"
}

def windows() {
    System.properties['os.name'].toLowerCase().contains('windows')
}

def start_prefix() {
    windows() ? 'cmd /C ' : ''
}
